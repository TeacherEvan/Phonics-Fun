/**
 * Phonics Fun - Letter G Game
 * Educational game for learning phonics
 * Author: AI Assistant
 */

// Note: ES6 imports commented out for compatibility - using global classes instead
// import EventBus from "./event-bus.js";
// import AudioManager from "./audio-manager.js";
// import EventManager from "./event-manager.js";
// import CollisionManager from "./collision-manager.js";
// import ParticleSystem from "./particles.js";

// Game state management
class GameState {
    constructor() {
        this.currentScreen = 'welcome';
        this.correctHits = 0;
        this.totalHits = 5;
        this.gameActive = false;
        this.planetsCreated = false;
        this.allowedLetters = ["G", "A", "B"]; // <- now supports three letters
        this.wordMessages = [
            'grape', 'goat', 'gold', 'girl', 'grandpa',
            { letter: "A", word: "apple",  soundKey: "voiceApple" },
            { letter: "A", word: "ant",    soundKey: "voiceAnt"   },
            { letter: "B", word: "ball",   soundKey: "voiceBall"  },
            { letter: "B", word: "bat",    soundKey: "voiceBat"   }
        ];
        this.currentWordIndex = 0;
        this.isMuted = false;
        this.musicVolume = 0.5;
        this.effectsVolume = 0.7;
        
        // Initialize subsystems
        this.audioManager = new AudioManager();
        this.eventManager = new EventManager();
        this.collisionManager = new CollisionManager();
        this.particleSystem = null;
        
        this.init();
    }

    init() {
        console.log('Initializing Phonics Fun game...');
        this.setupEventListeners();
        this.setupAudio();
        this.setupEventSubscriptions();
        this.createLetterGrid();
        this.createWelcomeAnimations();
        this.showScreen('welcome');
    }

    setupEventListeners() {
        // Welcome screen
        document.getElementById('start-game-btn').addEventListener('click', () => {
            console.log('Start game clicked');
            this.showScreen('level-select');
        });

        // Settings
        document.getElementById('settings-btn').addEventListener('click', () => {
            this.toggleSettings();
        });

        document.getElementById('close-settings').addEventListener('click', () => {
            this.toggleSettings();
        });

        document.getElementById('music-volume').addEventListener('input', (e) => {
            this.musicVolume = e.target.value / 100;
            this.audioManager.setVolume('music', this.musicVolume);
            document.getElementById('music-volume-display').textContent = e.target.value + '%';
        });

        document.getElementById('effects-volume').addEventListener('input', (e) => {
            this.effectsVolume = e.target.value / 100;
            this.audioManager.setVolume('effects', this.effectsVolume);
            document.getElementById('effects-volume-display').textContent = e.target.value + '%';
        });

        document.getElementById('mute-toggle').addEventListener('click', () => {
            this.toggleMute();
        });
        
        // Audio priority controls
        document.getElementById('high-priority-audio').addEventListener('change', (e) => {
            this.audioManager.setAudioPriority('high', e.target.checked);
        });
        
        document.getElementById('medium-priority-audio').addEventListener('change', (e) => {
            this.audioManager.setAudioPriority('medium', e.target.checked);
        });
        
        document.getElementById('low-priority-audio').addEventListener('change', (e) => {
            this.audioManager.setAudioPriority('low', e.target.checked);
            // If enabling background music, play it if we're on the welcome screen
            if (e.target.checked && this.currentScreen === 'welcome') {
                this.audioManager.play('background-music');
            }
        });

        // Voice template selection
        document.getElementById('voice-template-select').addEventListener('change', (e) => {
            this.handleVoiceTemplateChange(e.target.value);
        });

        document.getElementById('preview-voice').addEventListener('click', () => {
            this.previewVoiceTemplate();
        });

        // Level complete popup
        document.getElementById('next-level-btn').addEventListener('click', () => {
            console.log('Next level clicked');
            this.hidePopup('level-complete-popup');
            this.showScreen('level-select');
        });

        document.getElementById('exit-btn').addEventListener('click', () => {
            console.log('Exit clicked');
            this.hidePopup('level-complete-popup');
            this.showScreen('welcome');
        });

        // Coming soon popup
        document.getElementById('close-popup').addEventListener('click', () => {
            console.log('Close popup clicked');
            this.hidePopup('coming-soon-popup');
        });

        // Touch and mouse event optimization for Android
        document.addEventListener('touchstart', (e) => {
            // Only prevent default for game area touches
            if (e.target.closest('.game-area') || e.target.closest('.planet')) {
                e.preventDefault();
            }
        }, { passive: false });

        document.addEventListener('touchmove', (e) => {
            // Prevent scrolling during touch moves
            if (e.target.closest('.game-area') || e.target.closest('.planet')) {
                e.preventDefault();
            }
        }, { passive: false });

        document.addEventListener('touchend', (e) => {
            // Handle touch end events
            if (e.target.closest('.game-area') || e.target.closest('.planet')) {
                e.preventDefault();
            }
        }, { passive: false });

        // Prevent context menu on long touch
        document.addEventListener('contextmenu', (e) => {
            e.preventDefault();
        });

        // Handle orientation changes
        window.addEventListener('orientationchange', () => {
            setTimeout(() => {
                this.handleOrientationChange();
            }, 100);
        });

        // Handle page visibility changes (important for Android)
        document.addEventListener('visibilitychange', () => {
            if (document.hidden) {
                // Pause game when page is hidden
                this.audioManager.pauseAll();
            } else {
                // Resume game when page becomes visible
                this.audioManager.resumeAll();
            }
        });
    }

    handleOrientationChange() {
        // Handle orientation changes for better mobile support
        const gameArea = document.querySelector('.game-area');
        if (gameArea) {
            // Force a repaint
            gameArea.style.display = 'none';
            gameArea.offsetHeight; // Trigger reflow
            gameArea.style.display = '';
        }
    }

    setupAudio() {
        // Load settings into audio manager
        this.audioManager.loadSettings({
            musicVolume: this.musicVolume,
            effectsVolume: this.effectsVolume,
            isMuted: this.isMuted
        });
    }
    
    setupEventSubscriptions() {
        // Subscribe to collision events
        this.eventManager.subscribe('collision:asteroid_planet', (data) => {
            this.handleAsteroidPlanetCollision(data.asteroid, data.planet);
        });
        
        this.eventManager.subscribe('level:complete', () => {
            this.completeLevel();
        });
        
        // Set up collision handlers
        this.collisionManager.registerTypeCollision('asteroid', 'planet', (asteroid, planet, type) => {
            if (type === 'start') {
                this.eventManager.emit('collision:asteroid_planet', {
                    asteroid: asteroid,
                    planet: planet
                });
            }
        });
    }

    // centralised reaction to collisions â”€ runs once at start-up
    EventBus.addEventListener("planet-hit", async ({ detail }) => {
        // Waiting for both animations/SFX to finish keeps everything in sync
        await Promise.all([
            detail.planet.triggerExplosion(),
            detail.asteroid.triggerExplosion()
        ]);
    });

    handleAsteroidPlanetCollision(asteroid, planet) {
        console.log('Asteroid collided with planet:', asteroid.id, planet.id);
        
        // Get the actual DOM elements
        const asteroidElement = asteroid.element;
        const planetElement = planet.element;
        
        // Get the position for explosion
        const x = asteroid.x;
        const y = asteroid.y;
        
        // Check if it's a G planet
        if (this.isCorrectLetter(planet.data.letter)) {
            this.handleCorrectCollision(planetElement, x, y, asteroid.id, planet.id);
        } else {
            this.handleIncorrectCollision(planetElement, x, y, asteroid.id);
        }
    }
    
    handleCorrectCollision(planet, x, y, asteroidId, planetId) {
        console.log('Correct collision!');
        
        // Create explosion at collision point
        this.createExplosion(x, y);
        
        // Play sound effects
        this.audioManager.play('explosion');
        this.audioManager.play('phoneme-g');
        
        // Remove planet and asteroid from collision manager
        this.collisionManager.unregisterObject(asteroidId);
        this.collisionManager.unregisterObject(planetId);
        
        // Remove planet from DOM
        planet.remove();
        
        // Particle system effects
        if (this.particleSystem) {
            this.particleSystem.planetDestroyed(x, y);
        }
        
        // Voice message and word image
        setTimeout(() => {
            this.playVoiceMessage();
            this.showWordImage();
        }, 500);
        
        // Update progress
        this.correctHits++;
        this.updateProgress();
        
        // Check if level complete
        if (this.correctHits >= this.totalHits) {
            setTimeout(() => {
                this.eventManager.emit('level:complete');
            }, 2000);
        }
    }
    
    handleIncorrectCollision(planet, x, y, asteroidId) {
        console.log('Incorrect collision');
        
        // Remove asteroid from collision manager
        this.collisionManager.unregisterObject(asteroidId);
        
        // Create smaller explosion or visual feedback
        if (this.particleSystem) {
            this.particleSystem.asteroidHit(x, y, false);
        }
    }

    toggleMute() {
        this.isMuted = !this.isMuted;
        const muteButton = document.getElementById('mute-toggle');
        muteButton.textContent = this.isMuted ? 'ðŸ”‡' : 'ðŸ”Š';
        
        // Update audio manager
        this.audioManager.toggleMute();
    }

    toggleSettings() {
        const panel = document.getElementById('settings-panel');
        panel.classList.toggle('active');
        
        // Update voice template selector to show current selection
        if (panel.classList.contains('active')) {
            this.updateVoiceTemplateSelector();
        }
    }

    handleVoiceTemplateChange(templateId) {
        console.log('Voice template changed to:', templateId);
        
        // Update audio manager with new template
        if (this.audioManager.setVoiceTemplate(templateId)) {
            console.log('Voice template loaded successfully');
        } else {
            console.error('Failed to load voice template:', templateId);
        }
    }

    previewVoiceTemplate() {
        // Play a sample voice message to preview the current template
        const sampleWords = ['grape', 'goat', 'gold'];
        const randomWord = sampleWords[Math.floor(Math.random() * sampleWords.length)];
        
        console.log('Previewing voice template with word:', randomWord);
        this.audioManager.play('voice-' + randomWord);
    }

    updateVoiceTemplateSelector() {
        const selector = document.getElementById('voice-template-select');
        const currentTemplate = this.audioManager.getCurrentVoiceTemplate();
        selector.value = currentTemplate;
    }

    createWelcomeAnimations() {
        const planetsContainer = document.querySelector('.welcome-planets');
        const asteroidsContainer = document.querySelector('.welcome-asteroids');

        // Create planets with interactive effects
        for (let i = 1; i <= 4; i++) {
            const planet = document.createElement('div');
            planet.className = 'welcome-planet welcome-planet-' + i;
            
            // Add hover effects
            planet.addEventListener('mouseenter', () => {
                planet.style.filter = 'drop-shadow(0 0 30px rgba(255, 255, 255, 0.8)) brightness(1.2)';
                planet.style.transform = 'scale(1.1)';
            });
            
            planet.addEventListener('mouseleave', () => {
                planet.style.filter = 'drop-shadow(0 0 20px rgba(255, 255, 255, 0.3))';
                planet.style.transform = 'scale(1)';
            });
            
            // Add click effect
            planet.addEventListener('click', () => {
                this.createWelcomeSparkles(planet);
            });
            
            planetsContainer.appendChild(planet);
        }

        // Create asteroids with interactive effects
        for (let i = 1; i <= 6; i++) {
            const asteroid = document.createElement('div');
            asteroid.className = 'welcome-asteroid welcome-asteroid-' + i;
            
            // Add hover effects
            asteroid.addEventListener('mouseenter', () => {
                asteroid.style.filter = 'drop-shadow(0 0 15px rgba(255, 255, 255, 0.6)) brightness(1.3)';
                asteroid.style.transform = 'scale(1.2)';
            });
            
            asteroid.addEventListener('mouseleave', () => {
                asteroid.style.filter = 'drop-shadow(0 0 10px rgba(255, 255, 255, 0.2))';
                asteroid.style.transform = 'scale(1)';
            });
            
            // Add click effect
            asteroid.addEventListener('click', () => {
                this.createWelcomeSparkles(asteroid);
            });
            
            asteroidsContainer.appendChild(asteroid);
        }
    }

    createWelcomeSparkles(element) {
        const rect = element.getBoundingClientRect();
        const x = rect.left + rect.width / 2;
        const y = rect.top + rect.height / 2;
        
        // Create sparkle particles
        for (let i = 0; i < 8; i++) {
            const sparkle = document.createElement('div');
            sparkle.className = 'welcome-sparkle';
            sparkle.style.cssText = 'position: fixed; ' +
                'width: 4px; ' +
                'height: 4px; ' +
                'background: radial-gradient(circle, #fff, #ffd700); ' +
                'border-radius: 50%; ' +
                'left: ' + x + 'px; ' +
                'top: ' + y + 'px; ' +
                'pointer-events: none; ' +
                'z-index: 100; ' +
                'animation: sparkleOut 0.6s ease-out forwards;';
            
            const angle = (i / 8) * Math.PI * 2;
            const distance = 50;
            sparkle.style.setProperty('--dx', (Math.cos(angle) * distance) + 'px');
            sparkle.style.setProperty('--dy', (Math.sin(angle) * distance) + 'px');
            
            document.body.appendChild(sparkle);
            
            setTimeout(() => {
                sparkle.remove();
            }, 600);
        }
    }

    createLetterGrid() {
        const grid = document.querySelector('.letter-grid');
        const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
        
        letters.split('').forEach(letter => {
            const button = document.createElement('button');
            button.className = letter === 'G' ? 'letter-button playable' : 'letter-button disabled';
            button.textContent = letter;
            button.setAttribute('data-letter', letter);
            
            button.addEventListener('click', () => {
                console.log('Letter ' + letter + ' clicked');
                this.handleLetterClick(letter);
            });
            
            grid.appendChild(button);
        });
    }

    handleLetterClick(letter) {
        if (this.isCorrectLetter(letter)) {
            this.startGLevel();
        } else {
            this.showPopup('coming-soon-popup');
        }
    }

    startGLevel() {
        console.log('Starting G level...');
        this.showOverlay('ready-overlay');
        
        // Simulate asset preloading
        setTimeout(() => {
            this.hideOverlay('ready-overlay');
            this.showScreen('gameplay');
            this.initializeGameplay();
        }, 5000);
    }

    initializeGameplay() {
        console.log('Initializing gameplay...');
        this.gameActive = true;
        this.correctHits = 0;
        this.currentWordIndex = 0;
        this.updateProgress();
        
        // Initialize particle system
        if (window.ParticleSystem) {
            this.particleSystem = new ParticleSystem();
            this.particleSystem.createStarfield();
        }
        
        if (!this.planetsCreated) {
            this.createPlanets();
            this.planetsCreated = true;
        }
    }

    createPlanets() {
        console.log('Creating planets...');
        const container = document.querySelector('.planets-container');
        container.innerHTML = ''; // Clear existing planets
        
        // Create 5 G planets
        for (let i = 0; i < 5; i++) {
            const planet = document.createElement('div');
            planet.className = 'planet g-planet';
            planet.textContent = 'G';
            planet.setAttribute('data-letter', 'G');
            planet.setAttribute('data-index', i);
            
            // Random position
            const x = Math.random() * (window.innerWidth - 100);
            const y = Math.random() * (window.innerHeight - 100);
            planet.style.left = `${x}px`;
            planet.style.top = `${y}px`;
            
            // Random animation delay
            planet.style.animationDelay = (Math.random() * 8) + 's';
            
            planet.addEventListener('click', () => {
                console.log(`G planet ${i} clicked`);
                this.handlePlanetClick(planet, 'G');
            });
            
            container.appendChild(planet);
            
            // Register with collision manager
            this.collisionManager.registerObject(`planet-g-${i}`, planet, 'planet', {
                isStatic: false,
                data: { letter: 'G', index: i }
            });
        }
        
        // Create 3 non-G planets
        for (let i = 0; i < 3; i++) {
            const planet = document.createElement('div');
            planet.className = 'planet other-planet';
            const randomLetter = String.fromCharCode(65 + Math.floor(Math.random() * 26));
            const letter = randomLetter === 'G' ? 'H' : randomLetter;
            planet.textContent = letter;
            planet.setAttribute('data-letter', letter);
            
            // Random position
            const x = Math.random() * (window.innerWidth - 100);
            const y = Math.random() * (window.innerHeight - 100);
            planet.style.left = `${x}px`;
            planet.style.top = `${y}px`;
            
            // Random animation delay
            planet.style.animationDelay = `${Math.random() * 12}s`;
            
            planet.addEventListener('click', () => {
                console.log(`Non-G planet ${letter} clicked`);
                this.handlePlanetClick(planet, letter);
            });
            
            container.appendChild(planet);
            
            // Register with collision manager
            this.collisionManager.registerObject(`planet-other-${i}`, planet, 'planet', {
                isStatic: false,
                data: { letter: letter, index: i }
            });
        }
    }

    handlePlanetClick(planet, letter) {
        if (!this.gameActive) return;
        
        const rect = planet.getBoundingClientRect();
        const planetX = rect.left + rect.width / 2;
        const planetY = rect.top + rect.height / 2;
        
        if (this.isCorrectLetter(letter)) {
            this.handleCorrectHit(planet, planetX, planetY);
        } else {
            this.handleIncorrectHit(planet, planetX, planetY);
        }
    }

    handleCorrectHit(planet, x, y) {
        console.log('Correct hit!');
        
        // Get planet ID
        const index = planet.getAttribute('data-index');
        const planetId = `planet-g-${index}`;
        
        // Create fiery asteroid with particle trail
        const asteroidId = `asteroid-fiery-${Date.now()}`;
        const asteroidElement = this.createAsteroid(x, y, 'fiery', asteroidId);
        
        // Add particle trail to asteroid
        if (this.particleSystem) {
            const trailInterval = setInterval(() => {
                if (asteroidElement && asteroidElement.parentNode) {
                    const rect = asteroidElement.getBoundingClientRect();
                    const asteroidX = rect.left + rect.width / 2;
                    const asteroidY = rect.top + rect.height / 2;
                    this.particleSystem.asteroidTrail(asteroidX, asteroidY, asteroidElement.velocity || { x: 2, y: 2 });
                } else {
                    clearInterval(trailInterval);
                }
            }, 50);
        }
    }

    handleIncorrectHit(planet, x, y) {
        console.log('Incorrect hit');
        
        // Create dull asteroid
        const asteroidId = `asteroid-dull-${Date.now()}`;
        this.createAsteroid(x, y, 'dull', asteroidId);
    }

    createAsteroid(targetX, targetY, type, id) {
        const asteroid = document.createElement('div');
        asteroid.className = `asteroid ${type}`;
        asteroid.id = id;
        
        // Random starting position from screen edge
        const side = Math.floor(Math.random() * 4);
        let startX, startY;
        
        switch(side) {
            case 0: // Top
                startX = Math.random() * window.innerWidth;
                startY = -20;
                break;
            case 1: // Right
                startX = window.innerWidth + 20;
                startY = Math.random() * window.innerHeight;
                break;
            case 2: // Bottom
                startX = Math.random() * window.innerWidth;
                startY = window.innerHeight + 20;
                break;
            case 3: // Left
                startX = -20;
                startY = Math.random() * window.innerHeight;
                break;
        }
        
        asteroid.style.left = `${startX}px`;
        asteroid.style.top = `${startY}px`;
        
        // Calculate trajectory
        const deltaX = targetX - startX;
        const deltaY = targetY - startY;
        const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
        
        // Store velocity for particle system
        const velocity = {
            x: deltaX / distance * 10,
            y: deltaY / distance * 10
        };
        asteroid.velocity = velocity;
        
        // Animate to target
        const duration = type === 'fiery' ? 1000 : 1500;
        asteroid.style.transition = `all ${duration}ms linear`;
        
        document.querySelector('.asteroids-container').appendChild(asteroid);
        
        // Register with collision manager
        this.collisionManager.registerObject(id, asteroid, 'asteroid', {
            velocity: velocity,
            isStatic: false,
            data: { type: type }
        });
        
        // Animate
        setTimeout(() => {
            asteroid.style.left = `${targetX}px`;
            asteroid.style.top = `${targetY}px`;
        }, 50);
        
        return asteroid;
    }

    createExplosion(x, y) {
        // Create the main explosion visual
        const explosion = document.createElement('div');
        explosion.className = 'explosion';
        explosion.style.left = `${x - 75}px`;
        explosion.style.top = `${y - 75}px`;
        
        document.querySelector('.explosions-container').appendChild(explosion);
        
        // Create enhanced particle explosion
        if (this.particleSystem) {
            this.particleSystem.createEnhancedExplosion(x, y, 1.5);
        }
        
        // Add screen shake effect
        this.createScreenShake();
        
        setTimeout(() => {
            if (explosion.parentNode) {
                explosion.remove();
            }
        }, 800);
    }

    createScreenShake() {
        const gameArea = document.querySelector('.game-area');
        if (gameArea) {
            gameArea.style.animation = 'screenShake 0.3s ease-in-out';
            setTimeout(() => {
                gameArea.style.animation = '';
            }, 300);
        }
    }

    playVoiceMessage() {
        const word = this.wordMessages[this.currentWordIndex];
        this.audioManager.play(`voice-${word}`);
        
        // Fallback to speech synthesis if audio file fails
        setTimeout(() => {
            // Check if the user has interacted with the page
            if (document.visibilityState === 'visible' && this.audioManager.canUseSpeechSynthesis) {
                this.audioManager.speak(`G is for ${word}!`, { pitch: 1.2, rate: 0.9 });
            }
        }, 500);
        
        this.currentWordIndex = (this.currentWordIndex + 1) % this.wordMessages.length;
    }

    showWordImage() {
        const word = this.wordMessages[this.currentWordIndex - 1] || this.wordMessages[0];
        const wordBg = document.querySelector('.word-background');
        
        // Set background image (placeholder for now)
        wordBg.style.backgroundImage = `url('assets/images/${word}.png')`;
        wordBg.classList.add('visible');
        
        // Hide after 3 seconds or until next hit
        setTimeout(() => {
            wordBg.classList.remove('visible');
        }, 3000);
    }

    updateProgress() {
        const progressFill = document.getElementById('progress-fill');
        const hitsCounter = document.getElementById('hits-counter');
        
        const percentage = (this.correctHits / this.totalHits) * 100;
        progressFill.style.width = `${percentage}%`;
        hitsCounter.textContent = this.correctHits;
    }

    completeLevel() {
        console.log('Level complete!');
        this.gameActive = false;
        this.audioManager.play('celebration');
        
        // Create celebration particles
        if (this.particleSystem) {
            this.particleSystem.levelComplete();
        }
        
        this.showPopup('level-complete-popup');
    }

    showScreen(screenId) {
        console.log(`Showing screen: ${screenId}`);
        
        // Hide all screens
        document.querySelectorAll('.screen').forEach(screen => {
            screen.classList.remove('active');
        });
        
        // Show target screen
        document.getElementById(`${screenId}-screen`).classList.add('active');
        this.currentScreen = screenId;
        
        // Handle background music
        if (screenId === 'welcome') {
            this.audioManager.play('background-music');
            this.resetGame();
        } else {
            this.audioManager.stop('background-music');
        }
    }

    showOverlay(overlayId) {
        console.log(`Showing overlay: ${overlayId}`);
        document.getElementById(overlayId).classList.remove('hidden');
    }

    hideOverlay(overlayId) {
        console.log(`Hiding overlay: ${overlayId}`);
        document.getElementById(overlayId).classList.add('hidden');
    }

    showPopup(popupId) {
        console.log(`Showing popup: ${popupId}`);
        document.getElementById(popupId).classList.remove('hidden');
    }

    hidePopup(popupId) {
        console.log(`Hiding popup: ${popupId}`);
        document.getElementById(popupId).classList.add('hidden');
    }

    resetGame() {
        console.log('Resetting game...');
        this.correctHits = 0;
        this.currentWordIndex = 0;
        this.gameActive = false;
        this.planetsCreated = false;
        
        // Cleanup collision manager
        this.collisionManager.clear();
        
        // Cleanup particle system
        if this.particleSystem) {
            this.particleSystem.destroy();
            this.particleSystem = null;
        }
        
        // Clear containers
        document.querySelector('.planets-container').innerHTML = '';
        document.querySelector('.asteroids-container').innerHTML = '';
        document.querySelector('.explosions-container').innerHTML = '';
        
        // Reset UI
        this.updateProgress();
        document.querySelector('.word-background').classList.remove('visible');
    }

    isCorrectLetter(letter) {
        return this.allowedLetters.includes(letter);
    }
}

// Error handling
window.addEventListener('error', (e) => {
    console.error('Game error:', e.error);
});

// Initialize game when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM loaded, starting game...');
    window.game = new GameState();
});

// Handle visibility changes (for mobile)
document.addEventListener('visibilitychange', () => {
    if (document.hidden) {
        console.log('Game paused (tab hidden)');
        // Pause any ongoing animations or sounds
        if (window.game && window.game.audioManager) {
            window.game.audioManager.stopAll();
        }
    } else {
        console.log('Game resumed (tab visible)');
        // Resume if needed
        if (window.game && window.game.currentScreen === 'welcome') {
            window.game.audioManager.play('background-music');
        }
    }
});

// Handle window resize
window.addEventListener('resize', () => {
    console.log('Window resized');
    // Recreate planets if in gameplay
    if (window.game && window.game.currentScreen === 'gameplay' && window.game.planetsCreated) {
        window.game.resetGame();
        window.game.createPlanets();
    }
});

// Utility functions
function debounce(func, wait) {
    let timeout;
    return function executedFunction() {
        const args = arguments; // Use arguments object instead of spread operator
        const later = () => {
            clearTimeout(timeout);
            func.apply(this, args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

// Export for testing (ES6 modules temporarily disabled)
// export { GameState };
window.GameState = GameState;
